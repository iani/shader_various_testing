#extension GL_ARB_texture_rectangle:enable

uniform vec3 iResolution;
uniform vec4 iMouse;
uniform vec2 position;
uniform float iGlobalTime;
uniform sampler2DRect iCh;
#define ITERS 64

vec3 rotateX(float a, vec3 v) {	return vec3(v.x, cos(a) * v.y + sin(a) * v.z, cos(a) * v.z - sin(a) * v.y); }
vec3 rotateY(float a, vec3 v) { return vec3(cos(a) * v.x + sin(a) * v.z, v.y, cos(a) * v.z - sin(a) * v.x); }
vec2 rotate(float a, vec2 v) { return vec2(cos(a) * v.x + sin(a) * v.y,cos(a) * v.y - sin(a) * v.x); }
float flicker(float x) { x = fract(x); return smoothstep(0.0, 0.1, x) - smoothstep(0.1, 0.2, x); }
float flickers() { return 1.0 + flicker(iGlobalTime) + flicker(iGlobalTime * 1.2); }

vec2 cubeInterval(vec3 ro, vec3 rd) {
	vec3 slabs0 = (vec3(+1.0) - ro) / rd;
	vec3 slabs1 = (vec3(-1.0) - ro) / rd;	
	vec3 mins = min(slabs0, slabs1);
	vec3 maxs = max(slabs0, slabs1);	
	return vec2(max(max(mins.x, mins.y), mins.z),min(min(maxs.x, maxs.y), maxs.z));	
}

vec2 hologramInterval(vec3 ro, vec3 rd) {
	vec3 scale = vec3(.6, .3, 0.1);
	return cubeInterval(ro / scale, rd / scale);
}

float hologramBrightness(vec2 p) {
        return dot(texture2DRect(iCh, p).rgb, vec3(1.0/2.0));
}

vec3 hologramImage(vec2 p) {
        vec2 tc = (p * -1.0 + vec2(1.0)) * 0.5;
        
        float d = 1e-3;	
	float b0 = hologramBrightness(gl_TexCoord[0].xy);
        float b1 = (hologramBrightness(gl_TexCoord[0].xy));// + vec2(d, 0.0)) - b0) / d; 
	float b2 = (hologramBrightness(gl_TexCoord[0].xy));// + vec2(0.0, d)) - b0) / d;
	float f = flickers();
        float sharp = pow(length(vec2(b1, b2)) * 0.1, 5.0) * 0.02;
	return (vec3(sharp + b0) * 3.0) * vec3(0.5, 0.7, 1.0)*mix(0.5, 0.9, pow(0.5 + 0.5 * cos(p.y * 80.0 + iGlobalTime * 70.0), 4.0))*f*(2.0 - tc.y * 2.0 + (1.0 - smoothstep(0.0, 0.1, tc.y)) * 10.0);
}

void main(void) {
	vec2 uv = (gl_FragCoord.xy / iResolution.xy - .4);
        uv.x *= iResolution.x / iResolution.y;
	vec3 ct = vec3(0.1, 0.1, 0.0);
        vec3 cp = rotateY(1.5 * .5, vec3(0.0, -0.2 + sin(0.6 * 0.5) * 0.7, 1.9));
        //cp += rotateX( 0.5 * .5, vec3(0.0, -0.3 + sin(0.6 * 0.5) * iMouse.y * 0.7, .9));

	vec3 cw = normalize(ct - cp);
	vec3 cu = normalize(cross(cw, vec3(0.0, 1.0, 0.0)));
	vec3 cv = normalize(cross(cu, cw));

	mat3 rm = mat3(cu, cv, cw);
	vec3 ro = cp, rd = rm * vec3(uv, -2.0);	
	vec2 io = hologramInterval(ro, rd);
	float cov = step(io.x, io.y);
	float len = abs(io.x - io.y);	
	vec3 accum = vec3(0.0);
	io.x = min(0.0, io.x);
	ro += rd * io.x;
	rd *= (io.y - io.x) / float(ITERS);

	for(int i = 0; i < ITERS; i +=2 ) {
		vec3 rp = ro + rd * float(i);
		accum += hologramImage(rp.xy);
	}
	gl_FragColor.rgb =  accum * cov * (len / float(ITERS)) *2.8;
	gl_FragColor.a = 1.5;
}
